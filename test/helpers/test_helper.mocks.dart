// Mocks generated by Mockito 5.4.4 from annotations
// in coin_flutter/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:convert' as _i13;
import 'dart:typed_data' as _i15;

import 'package:coin_flutter/data/datasources/coin_remote_data_source.dart'
    as _i10;
import 'package:coin_flutter/data/models/coins/coin_detail_dto.dart' as _i5;
import 'package:coin_flutter/data/models/coins/coin_dto.dart' as _i11;
import 'package:coin_flutter/data/models/trending/trending_response_dto.dart'
    as _i4;
import 'package:coin_flutter/domain/models/coins/coin.dart' as _i9;
import 'package:coin_flutter/domain/models/coins/coin_detail.dart' as _i3;
import 'package:coin_flutter/domain/models/trending/trending.dart' as _i2;
import 'package:coin_flutter/domain/repositories/coin_repository.dart' as _i6;
import 'package:coin_flutter/domain/usecases/get_trending_coins.dart' as _i12;
import 'package:http/http.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTrending_0 extends _i1.SmartFake implements _i2.Trending {
  _FakeTrending_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCoinDetail_1 extends _i1.SmartFake implements _i3.CoinDetail {
  _FakeCoinDetail_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTrendingResponseDTO_2 extends _i1.SmartFake
    implements _i4.TrendingResponseDTO {
  _FakeTrendingResponseDTO_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCoinDetailDTO_3 extends _i1.SmartFake implements _i5.CoinDetailDTO {
  _FakeCoinDetailDTO_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCoinRepository_4 extends _i1.SmartFake
    implements _i6.CoinRepository {
  _FakeCoinRepository_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_5 extends _i1.SmartFake implements _i7.Response {
  _FakeResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_6 extends _i1.SmartFake
    implements _i7.StreamedResponse {
  _FakeStreamedResponse_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CoinRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoinRepository extends _i1.Mock implements _i6.CoinRepository {
  MockCoinRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.Trending> getTrendingCoins() => (super.noSuchMethod(
        Invocation.method(
          #getTrendingCoins,
          [],
        ),
        returnValue: _i8.Future<_i2.Trending>.value(_FakeTrending_0(
          this,
          Invocation.method(
            #getTrendingCoins,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Trending>);

  @override
  _i8.Future<List<_i9.Coin>> getAllCoins() => (super.noSuchMethod(
        Invocation.method(
          #getAllCoins,
          [],
        ),
        returnValue: _i8.Future<List<_i9.Coin>>.value(<_i9.Coin>[]),
      ) as _i8.Future<List<_i9.Coin>>);

  @override
  _i8.Future<_i3.CoinDetail> getCoin(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getCoin,
          [id],
        ),
        returnValue: _i8.Future<_i3.CoinDetail>.value(_FakeCoinDetail_1(
          this,
          Invocation.method(
            #getCoin,
            [id],
          ),
        )),
      ) as _i8.Future<_i3.CoinDetail>);
}

/// A class which mocks [CoinRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoinRemoteDataSource extends _i1.Mock
    implements _i10.CoinRemoteDataSource {
  MockCoinRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i4.TrendingResponseDTO> getTrendingCoins() => (super.noSuchMethod(
        Invocation.method(
          #getTrendingCoins,
          [],
        ),
        returnValue: _i8.Future<_i4.TrendingResponseDTO>.value(
            _FakeTrendingResponseDTO_2(
          this,
          Invocation.method(
            #getTrendingCoins,
            [],
          ),
        )),
      ) as _i8.Future<_i4.TrendingResponseDTO>);

  @override
  _i8.Future<List<_i11.CoinDTO>> getAllCoins() => (super.noSuchMethod(
        Invocation.method(
          #getAllCoins,
          [],
        ),
        returnValue: _i8.Future<List<_i11.CoinDTO>>.value(<_i11.CoinDTO>[]),
      ) as _i8.Future<List<_i11.CoinDTO>>);

  @override
  _i8.Future<_i5.CoinDetailDTO> getCoin(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getCoin,
          [id],
        ),
        returnValue: _i8.Future<_i5.CoinDetailDTO>.value(_FakeCoinDetailDTO_3(
          this,
          Invocation.method(
            #getCoin,
            [id],
          ),
        )),
      ) as _i8.Future<_i5.CoinDetailDTO>);
}

/// A class which mocks [GetTrendingCoinsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTrendingCoinsUseCase extends _i1.Mock
    implements _i12.GetTrendingCoinsUseCase {
  MockGetTrendingCoinsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.CoinRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCoinRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.CoinRepository);

  @override
  _i8.Future<_i2.Trending> execute() => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i8.Future<_i2.Trending>.value(_FakeTrending_0(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Trending>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i7.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i7.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<String>.value(_i14.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<_i15.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i15.Uint8List>.value(_i15.Uint8List(0)),
      ) as _i8.Future<_i15.Uint8List>);

  @override
  _i8.Future<_i7.StreamedResponse> send(_i7.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i8.Future<_i7.StreamedResponse>.value(_FakeStreamedResponse_6(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i8.Future<_i7.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
